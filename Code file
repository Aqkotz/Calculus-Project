#Andy Kotz and Andrew Parker derivatives project

#Inputs
Function = input("Input Function: ")
#IntvlStart = float(input("Input Interval Start: "))
#IntvlEnd = float(input("Input Interval End: "))

def derivative (Func):
    if "^" in Func:
        return powerrule (Func)
    elif "*" in Func:
        return productrule (Func)
    elif Func == "x":
        return ("1")

def powerrule (Func):
    parts = Func.split("^")
    ax = parts[0].split("*")
    if len(ax) <= 1:
        coef = 1
        x = ax[0]
    else:
        coef = ax[0]
        x = ax[1]
    exp = parts[1]
    derivx = ""
    if derivative(x) != "1":
        
    if (float(exp)-1) == 1:
        deriv = x
    else:
        deriv = (x+"^"+str(float(exp)-1))
    if coef != 1:
        deriv = (str(float(coef)*float(exp))+"*"+deriv)
    return deriv
    
def productrule (Func):
    parts = Func.split("*")
    u = parts[0]
    del parts[0]
    v = ""
    for i in parts:
        if v == "":
            v = (v+i)
        if v != "":
            v = (v+"*"+i)
    derivproduct = (u+"*"+derivative(v)+"+"+v+derivative(u))
    return derivproduct
    
print (derivative (Function))