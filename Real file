Function = input("Input Function: ")
IntvlS = int(input("Input Interval Start: "))
IntvlE = int(input("Input Interval End: "))

indices = []        #x values - quoth andy koth
points = []         #Y values 
firstderiv = []     #Definition of derivative 
secondderiv = []    #Definition of derivative reapplied 
h = 0.000001     
res = 500
# Generate lists of points, derivatives, and second derivatives.
for l in range(res*IntvlS,res*IntvlE):          
    indices.append(float(l)/res)        #taking integers and turning them into floats                     
for x in indices:    #for exponents use x**
    points.append(eval(Function))               #adds y values to the empty list of points
for i in indices:                               #calculates the first derivative
    x = i
    FunCat = eval(Function)
    x = i + h
    FunDog = eval(Function)
    FunPets = FunCat-FunDog
    FunTimes = FunPets/h
    firstderiv.append(FunTimes)                 #adds 1st derivative values to empty list
"""
for k in indices:                               #Calculates the second derivative
    x = k+h
    FunIguana = eval(Function)
    x = k
    FunMonkey = -2*eval(Function)
    x = k-h 
    FunSnail = eval(Function)
    FunDonkey = FunIguana + FunMonkey + FunSnail
    FunAndrew = FunDonkey/(h**2)
    secondderiv.append(FunAndrew)
"""
#find criticals
def near(val,target):
    if (val-target) <= (1/res) and (val-target) >= (-1/res):
        return True
    else:
        return False
criticals = []
maxes = []
mins = []
pois = []

for i,num in enumerate(points):
    if near(firstderiv[i],0):
        if num > points[i-1] and num > points[i+1]:
            maxes.append(indices[i])
        elif num < points[i-1] and num < points[i+1]:
            mins.append(indices[i])
            

for i,num in enumerate():


print("")
print("maxes: "+str(maxes))
print("mins: "+str(mins))
print("POIs: "+str(pois))
