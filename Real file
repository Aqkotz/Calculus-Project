import math

Function = input("Input Function: ")
IntvlS = int(input("Input Interval Start: "))
IntvlE = int(input("Input Interval End: "))

indices = []        #x values - quoth andy koth
points = []         #Y values 
firstderiv = []     #Definition of derivative 
secondderiv = []    #Definition of derivative reapplied 
h = 0.000001        #value of h, used for finding derivatives
res = 50            #resolution; influences accuracy of results but also affects performance.


# Generate lists of points, derivatives, and second derivatives.
for l in range(res*IntvlS,res*IntvlE):          
    indices.append(float(l)/res)        #taking integers and turning them into floats                        #List of x values
for x in indices:    #for exponents use x**
    points.append(eval(Function))               #adds y values to the empty list of points                        #List of y values
for k in indices:                           #Calculates the second derivative
    x = k+h
    FunIguana = eval(Function)
    x = k
    FunMonkey = -2*eval(Function)
    x = k-h 
    FunSnail = eval(Function)
    FunDonkey = FunIguana + FunMonkey + FunSnail
    FunAndrew = FunDonkey/(h**2)
    secondderiv.append(FunAndrew)                        #list of second derivatives
for i in indices:
    x = i
    FunCat = eval(Function)
    x = i + h
    FunDog = eval(Function)
    FunPets = FunCat-FunDog
    FunTimes = FunPets/h
    firstderiv.append(FunTimes)

#Near function determines whether or not a value is near a target
def near(val,target):
    if (val-target) <= (2/res) and (val-target) >= (-2/res):
        return True
    else:
        return False


#Find maxima, minima, and points of inflection
maxes = []
mins = []
pois = []
poitypes = []
for i,num in enumerate(points):                                 #Find maxima and minima, add x values to lists
    if near(firstderiv[i],0):
        if num > points[i-1] and num > points[i+1]:
            maxes.append(indices[i])
        elif num < points[i-1] and num < points[i+1]:
            mins.append(indices[i])
for i,num in enumerate(secondderiv):                            #Find points of inflection, add x values to list
    if near(num,0):
        if secondderiv[i-1] < 0 and num >= 0:
            pois.append(indices[i])
            poitypes.append(1)
        elif secondderiv[i-1] > 0 and num <= 0:
            pois.append(indices[i])
            poitypes.append(-1)


#Find increasing and decreasing intervals; the starts are held in separate lists from the ends of the intervals
extrema = []
incstarts = []
incends = []
decstarts = []
decends = []

#Add maxes and mins to the list of extrema
for num in maxes:
    extrema.append(num)
for num in mins:
    extrema.append(num)
extrema.sort()


#Put together the interval lists
for i,num in enumerate(extrema):
    if num in maxes:
        incends.append(num)
        if i != 0:
            incstarts.append(extrema[i-1])
        else:
            incstarts.append(IntvlS)            #If this is the first extreme, the interval should start at the beginning of the interval
    elif num in mins:
        decends.append(num)
        if i != 0:
            decstarts.append(extrema[i-1])
        else:
            decstarts.append(IntvlS)            #If this is the first extreme, the interval should start at the beginning of the interval

#The final interval is not handled by the above code, so this adds it in separately
if len(maxes) > 0:
    if extrema[len(extrema)-1] in maxes:
        decstarts.append(extrema[len(extrema)-1])
        decends.append(IntvlE)
elif len(mins) > 0:
    if extrema[len(extrema)-1] in mins:
        incstarts.append(extrema[len(extrema)-1])
        incends.append(IntvlE)

if len(maxes) == 0 and len(mins) == 0:
    if points[0] > points[len(points)-1]:
        decstarts.append(IntvlS)
        decends.append(IntvlE)
    else:
        incstarts.append(IntvlS)
        incends.append(IntvlE)

#Find concave up and concave down intervals; the starts are held in separate lists from the ends of the intervals
upstarts = []
upends = []
downstarts = []
downends = []

#Put together the interval lists
for i,num in enumerate(pois):
    if poitypes[i] < 0:
        upends.append(num)
        if i != 0:
            upstarts.append(pois[i-1])
        else:
            upstarts.append(IntvlS)
    elif poitypes[i] > 0:
        downends.append(num)
        if i != 0:
            downstarts.append(pois[i-1])
        else:
            downstarts.append(IntvlS)

if len(poitypes) > 0:
    if poitypes[len(poitypes)-1] > 0:
        upstarts.append(pois[len(poitypes)-1])
        upends.append(IntvlE)
    elif poitypes[len(poitypes)-1] < 0:
        downstarts.append(pois[len(poitypes)-1])
        downends.append(IntvlE)


#Print all results   
print("")
print("Increasing: ")
for i,b in enumerate(incstarts):
    print ("("+str(b)+","+str(incends[i])+")")
print("Decreasing: ")
for i,b in enumerate(decstarts):
    print ("("+str(b)+","+str(decends[i])+")")
print("")
print("Concave up: ")
for i,b in enumerate(upstarts):
    print ("["+str(b)+","+str(upends[i])+"]")
print("Concave down: ")
for i,b in enumerate(downstarts):
    print ("["+str(b)+","+str(downends[i])+"]")
print("")
print("maxes: "+str(maxes))
print("mins: "+str(mins))
print("POIs: "+str(pois))
