import math

Function = input("Input Function: ")
IntvlS = int(input("Input Interval Start: "))
IntvlE = int(input("Input Interval End: "))

indices = []        #x values - quoth andy koth
points = []         #Y values 
firstderiv = []     #Definition of derivative 
secondderiv = []    #Definition of derivative reapplied 
h = 0.000001        #value of h, used for finding derivatives
res = 50            #resolution; influences accuracy of results but also affects performance.


# Generate lists of points, derivatives, and second derivatives.
def derivone(i):
    import math
    x = i
    FunCat = eval(Function)
    x = i + h
    FunDog = eval(Function)
    FunPets = FunCat-FunDog
    FunTimes = FunPets/h
    return (FunTimes)
for l in range(res*IntvlS,res*IntvlE):          
    indices.append(float(l)/res)        #taking integers and turning them into floats                        #List of x values
for x in indices:    #for exponents use x**
    points.append(eval(Function))               #adds y values to the empty list of points                        #List of y values
for k in indices:                           #Calculates the second derivative
    x = k+h
    FunIguana = eval(Function)
    x = k
    FunMonkey = -2*eval(Function)
    x = k-h 
    FunSnail = eval(Function)
    FunDonkey = FunIguana + FunMonkey + FunSnail
    FunAndrew = FunDonkey/(h**2)
    secondderiv.append(FunAndrew)                        #list of second derivatives
for i in indices:
    firstderiv.append(derivone(i))

#Near function determines whether or not a value is near a target
def near(val,target):
    if (val-target) <= (1/res) and (val-target) >= (-1/res):
        return True
    else:
        return False


#Find maxima, minima, and points of inflection
maxes = []
mins = []
pois = []
for i,num in enumerate(points):                                 #Find maxima and minima, add x values to lists
    if near(firstderiv[i],0):
        if num > points[i-1] and num > points[i+1]:
            maxes.append(indices[i])
        elif num < points[i-1] and num < points[i+1]:
            mins.append(indices[i])
for i,num in enumerate(secondderiv):                            #Find points of inflection, add x values to list
    if near(num,0):
        if secondderiv[i-1] < 0 and secondderiv[i+1] > 0:
            print (str(secondderiv[i-1])+" and "+str(secondderiv[i+1]))
            pois.append(indices[i])
        elif secondderiv[i-1] > 0 and secondderiv[i+1] < 0:
            print (str(secondderiv[i-1])+" and "+str(secondderiv[i+1]))
            pois.append(indices[i])


#Find increasing and decreasing intervals; the starts are held in separate lists from the ends of the intervals
extrema = [] 
incstarts = []
incends = []
decstarts = []
decends = []

#Add maxes and mins to the list of extrema
for num in maxes:
    extrema.append(num)
for num in mins:
    extrema.append(num)
extrema.sort()

#Put together the interval lists
for i,num in enumerate(extrema):
    if num in maxes:
        incends.append(num)
        if i != 0:
            incstarts.append(extrema[i-1])
        else:
            incstarts.append(IntvlS)            #If this is the first extreme, the interval should start at the beginning of the interval
    elif num in mins:
        decends.append(num)
        if i != 0:
            decstarts.append(extrema[i-1])
        else:
            decstarts.append(IntvlS)            #If this is the first extreme, the interval should start at the beginning of the interval

#The final interval is not handled by the above code, so this adds it in separately
if extrema[len(extrema)-1] in maxes:
    decstarts.append(extrema[len(extrema)-1])
    decends.append(IntvlE)
elif extrema[len(extrema)-1] in mins:
    incstarts.append(extrema[len(extrema)-1])
    incends.append(IntvlE)



#Print all results   
print("")
print("Increasing: ")
for i,b in enumerate(incstarts):
    print ("("+str(b)+","+str(incends[i])+")")
print("Decreasing: ")
for i,b in enumerate(decstarts):
    print ("("+str(b)+","+str(decends[i])+")")
print("")
print("maxes: "+str(maxes))
print("mins: "+str(mins))
print("POIs: "+str(pois))
