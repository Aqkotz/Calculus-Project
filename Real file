Function = input("Input Function: ")
IntvlS = int(input("Input Interval Start: "))
IntvlE = int(input("Input Interval End: "))

indices = []        #x values - quoth andy koth
points = []         #Y values 
firstderiv = []     #Definition of derivative 
secondderiv = []    #Definition of derivative reapplied 
h = 0.000001     
res = 5
# Generate lists of points, derivatives, and second derivatives.
for l in range(res*IntvlS,res*IntvlE):          
    indices.append(float(l)/res)        #taking integers and turning them into floats                     
for x in indices:    #for exponents use x**
    points.append(eval(Function))               #adds y values to the empty list of points
for i in indices:                               #calculates the first derivative
    x = i
    FunCat = eval(Function)
    x = i + h
    FunDog = eval(Function)
    FunPets = FunCat-FunDog
    FunTimes = FunPets/h
    firstderiv.append(FunTimes)                 #adds 1st derivative values to empty list
for k in indices:                               #Calculates the second derivative
    x = k+h
    FunIguana = eval(Function)
    x = k
    FunMonkey = -2*eval(Function)
    x = k-h 
    FunSnail = eval(Function)
    FunDonkey = FunIguana + FunMonkey + FunSnail
    FunAndrew = FunDonkey/(h**2)
    secondderiv.append(FunAndrew)

#find criticals
def near(val,targ):
    if (val-targ) <= (1.5/res) and (val-targ) >= (-1.5/res):
        return True
    else:
        return False
criticals = []
maxes = []
mins = []
pofs = []
for idx,num in enumerate(firstderiv):
    if near(num,0):
        criticals.append(idx)

for g in criticals:
    if near(secondderiv[g],0):
        pofs.append(indices[g])
    elif secondderiv[g] > 0:
        mins.append(indices[g])
    elif secondderiv[g] < 0:
        maxes.append(indices[g])

print("maxes: "+str(maxes))
print("mins: "+str(mins))
print("pofs: "+str(pofs))